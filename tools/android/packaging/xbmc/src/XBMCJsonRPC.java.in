package @APP_PACKAGE@;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ConnectException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONObject;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.SearchManager;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.MatrixCursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

import @APP_PACKAGE@.content.XBMCYTDLContentProvider;
import @APP_PACKAGE@.model.Album;
import @APP_PACKAGE@.model.Movie;
import @APP_PACKAGE@.model.MusicVideo;
import @APP_PACKAGE@.model.Song;
import @APP_PACKAGE@.model.TVEpisode;
import @APP_PACKAGE@.model.TVShow;
import @APP_PACKAGE@.content.XBMCFileContentProvider;
import @APP_PACKAGE@.model.File;
import @APP_PACKAGE@.model.Media;
import @APP_PACKAGE@.content.XBMCImageContentProvider;

public class XBMCJsonRPC
{
  public final static String APP_NAME = "@APP_NAME@ Search";
  public final static String COLUMN_FULL_PATH = "COLUMN_FULL_PATH";
  public final static String COLUMN_BASE_PATH = "COLUMN_BASE_PATH";
  public final static String COLUMN_FILENAME = "COLUMN_FILENAME";
  public final static String COLUMN_TITLE = "COLUMN_TITLE";
  public final static String COLUMN_TAGLINE = "COLUMN_TAGLINE";
  public final static String COLUMN_THUMB = "COLUMN_THUMB";
  public final static String COLUMN_FANART = "COLUMN_FANART";
  public final static String COLUMN_ID = "COLUMN_ID";
  public final static String COLUMN_VIEW_PROGRESS = "COLUMN_VIEW_PROGRESS";
  public final static String COLUMN_RECOMMENDATION_REASON = "COLUMN_RECOMMENDATION_REASON";

  public final static String REQ_ID_MOVIES = "1";
  public final static String REQ_ID_SHOWS = "2";
  public final static String REQ_ID_ALBUMS = "3";
  public final static String REQ_ID_ARTISTS = "4";
  public final static String REQ_ID_MOVIES_ACTOR = "5";
  public final static String REQ_ID_SHOWS_ACTOR = "6";

  private final static int MAX_ITEMS = 10;

  private static String TAG = "@APP_NAME@json";

  private String m_xbmc_web_url = "http://localhost:8080";
  private java.util.HashSet<Integer> mRecomendationIds = new java.util.HashSet<Integer>();

  private int MAX_RECOMMENDATIONS = 3;

  private String GET_VERSION =
          "{ \"jsonrpc\": \"2.0\", \"method\": \"JSONRPC.Version\", \"id\": 1 }";
  private String RECOMMENDATION_MOVIES_JSON =
                  "{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.GetMovies\", "
                  + "\"params\": { \"filter\": {\"field\": \"playcount\", \"operator\": \"is\", \"value\": \"0\"}, "
                  + "\"limits\": { \"start\" : 0, \"end\": 10}, "
                  + "\"properties\" : [\"imdbnumber\", \"title\", \"tagline\", \"thumbnail\", \"fanart\", \"year\", \"runtime\", \"file\", \"plot\"], "
                  + "\"sort\": { \"order\": \"descending\", \"method\": \"random\", \"ignorearticle\": true } }, "
                  + "\"id\": \"1\"}";

  private String RECOMMENDATIONS_SHOWS_JSON =
                 "{\"jsonrpc\":\"2.0\",\"method\":\"VideoLibrary.GetTVShows\",\"params\":{\"filter\":{\"and\":[{\"field\":\"playcount\",\"operator\":\"is\",\"value\":\"0\"},{\"field\":\"plot\",\"operator\":\"isnot\",\"value\":\"\"}]},\"limits\":{\"start\":0,\"end\":10},\"properties\":[\"imdbnumber\",\"title\",\"plot\",\"thumbnail\",\"fanart\", \"studio\"],\"sort\":{\"order\":\"descending\",\"method\":\"lastplayed\",\"ignorearticle\":true}},\"id\":\"1\"}";

  private String RECOMMENDATIONS_ALBUMS_JSON =
                 "{\"jsonrpc\": \"2.0\", \"method\": \"AudioLibrary.GetAlbums\", \"params\": { \"limits\": { \"start\" : 0, \"end\": 3}, \"properties\" : [\"title\", \"displayartist\", \"thumbnail\", \"fanart\"], \"sort\": { \"order\": \"descending\", \"method\": \"random\", \"ignorearticle\": true } }, \"id\": \"1\"}";

  private String SEARCH_MOVIES_JSON =
                  "{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.GetMovies\", "
                  + "\"params\": { \"filter\": {%s}, "
                  + "\"limits\": { \"start\" : 0, \"end\": 10}, "
                  + "\"properties\" : [\"imdbnumber\", \"title\", \"tagline\", \"thumbnail\", \"fanart\", \"year\", \"runtime\"], "
                  + "\"sort\": { \"order\": \"ascending\", \"method\": \"title\", \"ignorearticle\": true } }, "
                  + "\"id\": \"%s\"}";

  private String SEARCH_SHOWS_JSON =
           "{\"jsonrpc\":\"2.0\",\"method\":\"VideoLibrary.GetTVShows\",\"params\":{\"filter\":{%s},\"limits\":{\"start\":0,\"end\":10},\"properties\":[\"imdbnumber\",\"title\",\"plot\",\"thumbnail\",\"fanart\",\"year\"],\"sort\":{\"order\":\"descending\",\"method\":\"lastplayed\",\"ignorearticle\":true}},\"id\":\"%s\"}";

  private String SEARCH_ALBUMS_JSON =
                 "{\"jsonrpc\": \"2.0\", \"method\": \"AudioLibrary.GetAlbums\", \"params\": {\"filter\":{%s},\"limits\": { \"start\" : 0, \"end\": 10}, \"properties\" : [\"title\", \"displayartist\", \"thumbnail\", \"fanart\"], \"sort\": { \"order\": \"descending\", \"method\": \"dateadded\", \"ignorearticle\": true } }, \"id\": \"%s\"}";

  private String SEARCH_ARTISTS_JSON =
                 "{\"jsonrpc\": \"2.0\", \"method\": \"AudioLibrary.GetArtists\", \"params\": {\"filter\":{%s},\"limits\": { \"start\" : 0, \"end\": 10}, \"properties\" : [\"description\", \"thumbnail\", \"fanart\"], \"sort\": { \"order\": \"descending\", \"method\": \"dateadded\", \"ignorearticle\": true } }, \"id\": \"%s\"}";

  private String RETRIEVE_MOVIE_DETAILS =
          "{ \"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.GetMovieDetails\", \"params\": { \"movieid\" : %s, \"properties\" : [\"imdbnumber\", \"title\", \"tagline\", \"thumbnail\", \"fanart\", \"year\", \"runtime\", \"file\", \"plot\", \"trailer\"] }, \"id\": \"%s\" }";

  private String RETRIEVE_EPISODE_DETAILS =
          "{ \"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.GetEpisodeDetails\", \"params\": { \"episodeid\" : %s, \"properties\" : [\"title\", \"tvshowid\", \"showtitle\", \"season\", \"episode\", \"thumbnail\", \"fanart\", \"file\"] }, \"id\": \"%s\" }";

  private String RETRIEVE_TVSHOW_DETAILS =
          "{ \"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.GetTVShowDetails\", \"params\": { \"tvshowid\" : %s, \"properties\" : [\"title\", \"studio\", \"thumbnail\", \"fanart\"] }, \"id\": \"%s\" }";

  private String RETRIEVE_ALBUM_DETAILS =
          "{ \"jsonrpc\": \"2.0\", \"method\": \"AudioLibrary.GetAlbumDetails\", \"params\": { \"albumid\" : %s, \"properties\" : [\"title\", \"displayartist\", \"thumbnail\", \"fanart\",  \"artistid\"] }, \"id\": \"%s\" }";

  private String RETRIEVE_SONG_DETAILS =
          "{ \"jsonrpc\": \"2.0\", \"method\": \"AudioLibrary.GetSongDetails\", \"params\": { \"songid\" : %s, \"properties\" : [\"title\", \"displayartist\", \"thumbnail\", \"fanart\", \"albumid\", \"artistid\", \"file\"] }, \"id\": \"%s\" }";

  private String RETRIEVE_MUSICVIDEO_DETAILS =
          "{ \"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.GetMusicVideoDetails\", \"params\": { \"musicvideoid\" : %s, \"properties\" : [\"title\", \"artist\", \"thumbnail\", \"fanart\", \"file\"] }, \"id\": \"%s\" }";

  private String RETRIEVE_FILE_ITEMS =
          "{ \"jsonrpc\": \"2.0\", \"method\": \"Files.GetDirectory\", \"params\": { \"directory\" : \"%s\" }, \"id\": \"%s\" }";

  private NotificationManager mNotificationManager;

  public XBMCJsonRPC()
  {
    String jsonPort = XBMCProperties.getStringProperty("xbmc.jsonPort", "8080");
    m_xbmc_web_url = "http://localhost:" + jsonPort;
  }

  public String request_string(String jsonRequest)
  {
    try
    {
      //Log.d(TAG, "JSON in: " + jsonRequest);
      //Log.d(TAG, "JSON url: " + m_xbmc_web_url);

      String returnStr = null;
      StringBuilder strbuilder = new StringBuilder();

      URL url = new URL(m_xbmc_web_url + "/jsonrpc");
      HttpURLConnection connection = (HttpURLConnection) url.openConnection();
      connection.setDoOutput(true);
      connection.setDoInput(true);
      connection.setRequestProperty("Content-Type", "application/json");
      String auth = XBMCProperties.getJsonAuthorization();
      if (!auth.isEmpty())
        connection.setRequestProperty("Authorization", auth);
      connection.setRequestMethod("POST");

      OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
      writer.write(jsonRequest);
      writer.close();

      try
      {
        int statusCode = connection.getResponseCode();
        if (statusCode == 200)
        {
          InputStream content = connection.getInputStream();
          BufferedReader reader = new BufferedReader(new InputStreamReader(content, "UTF-8"));
          String line;
          while ((line = reader.readLine()) != null)
          {
            strbuilder.append(line);
          }
          reader.close();
          connection.disconnect();

          // Log.d(TAG, "JSON out: " + strbuilder.toString());
          returnStr = strbuilder.toString();

        }
        else
        {
          Log.e(TAG, "Failed to read JSON");
        }
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
      finally
      {
        connection.disconnect();
      }
      return returnStr;
    }
    catch (ConnectException ce)
    {
      // Connection not available or died
      return null;
    }
    catch (Exception e)
    {
      Log.e(TAG, "Failed to read JSON");
      e.printStackTrace();
      return null;
    }
  }

  public JSONObject request_object(String jsonRequest)
  {
    try
    {
      String stringResp = request_string(jsonRequest);
      if (stringResp == null)
        return null;
      JSONObject resp = new JSONObject(stringResp);
      return resp;
    }
    catch (Exception e)
    {
      Log.e(TAG, "Failed to parse JSON");
      e.printStackTrace();
      return null;
    }
  }

  public JSONArray request_array(String jsonRequest)
  {
    try
    {
      String stringResp = request_string(jsonRequest);
      if (stringResp == null)
        return null;
      JSONArray resp = new JSONArray(stringResp);
      return resp;
    }
    catch (Exception e)
    {
      Log.e(TAG, "Failed to parse JSON");
      e.printStackTrace();
      return null;
    }
  }

  public Bitmap getBitmap(String src)
  {
    try
    {
      JSONObject req = request_object("{\"jsonrpc\": \"2.0\", \"method\": \"Files.PrepareDownload\", \"params\": { \"path\": \""
          + src + "\"}, \"id\": \"1\"}");
      if (req == null || req.isNull("result"))
        return null;

      JSONObject result = req.getJSONObject("result");
      String surl = result.getJSONObject("details").getString("path");

      URL url = new URL(m_xbmc_web_url + "/" + surl);
      HttpURLConnection connection = (HttpURLConnection) url.openConnection();
      String auth = XBMCProperties.getJsonAuthorization();
      if (!auth.isEmpty())
        connection.setRequestProperty("Authorization", auth);
      connection.setDoInput(true);
      connection.connect();
      InputStream input = connection.getInputStream();
      Bitmap myBitmap = BitmapFactory.decodeStream(input);
      return myBitmap;
    } catch (Exception e)
    {
      e.printStackTrace();
      return null;
    }
  }

  public String getDownloadUrl(String src)
  {
    try
    {
      JSONObject req = request_object("{\"jsonrpc\": \"2.0\", \"method\": \"Files.PrepareDownload\", \"params\": { \"path\": \""
          + src + "\"}, \"id\": \"1\"}");
      if (req == null || req.isNull("result"))
        return "";

      JSONObject result = req.getJSONObject("result");
      String surl = result.getJSONObject("details").getString("path");

      return (m_xbmc_web_url + "/" + surl);
    } catch (Exception e)
    {
      e.printStackTrace();
      return "";
    }
  }

  public boolean Ping()
  {
    try
    {
      JSONObject req = request_object(GET_VERSION);
      if (req == null || req.isNull("result"))
        return false;
    }
    catch (Exception e)
    {
      return false;
    }
    return true;
  }

  public Cursor search(String query)
  {
      String[] menuCols = new String[] {
              BaseColumns._ID,
              COLUMN_TITLE,
              COLUMN_TAGLINE,
              COLUMN_THUMB,
              COLUMN_FANART,
      };
      MatrixCursor mc = new MatrixCursor(menuCols);

      try
      {
        JSONObject req = request_object(String.format(SEARCH_MOVIES_JSON, /*"\"operator\": \"contains\", \"field\": \"title\", \"value\": \"" + query + "\"", limit));*/
        "\"or\": [" +
        "{\"operator\": \"contains\", \"field\": \"title\", \"value\": \"" + query + "\"}," +
        "{\"operator\": \"contains\", \"field\": \"originaltitle\", \"value\": \"" + query + "\"}," +
        "{\"operator\": \"contains\", \"field\": \"set\", \"value\": \"" + query + "\"}," +
        "{\"operator\": \"contains\", \"field\": \"actor\", \"value\": \"" + query + "\"}," +
        "{\"operator\": \"contains\", \"field\": \"director\", \"value\": \"" + query + "\"}]"));

        if (req == null || req.isNull("result"))
          return null;

        JSONObject results = req.getJSONObject("result");
        JSONArray movies = results.getJSONArray("movies");

        for (int i = 0; i < movies.length(); ++i)
        {
          JSONObject movie = movies.getJSONObject(i);
          mc.addRow(new Object[]{movie.getString("movieid"), movie.getString("title"), movie.getString("tagline"), movie.getString("thumbnail"), movie.getString("fanart")});
        }
      } catch (Exception e)
      {
        e.printStackTrace();
        return null;
      }

      try
      {
        JSONObject req = request_object(String.format(SEARCH_SHOWS_JSON, /*"\"operator\": \"contains\", \"field\": \"title\", \"value\": \"" + query + "\"", limit));*/
        "\"or\": [" +
        "{\"operator\": \"contains\", \"field\": \"title\", \"value\": \"" + query + "\"}," +
        "{\"operator\": \"contains\", \"field\": \"actor\", \"value\": \"" + query + "\"}," +
        "{\"operator\": \"contains\", \"field\": \"director\", \"value\": \"" + query + "\"}]"));

        if (req == null || req.isNull("result"))
          return null;

        JSONObject results = req.getJSONObject("result");
        JSONArray tvshows = results.getJSONArray("tvshows");

        for (int i = 0; i < tvshows.length(); ++i)
        {
          JSONObject tvshow = tvshows.getJSONObject(i);
          mc.addRow(new Object[]{tvshow.getString("movieid"), tvshow.getString("title"), tvshow.getString("plot"), tvshow.getString("thumbnail"), tvshow.getString("fanart")});
        }
      } catch (Exception e)
      {
        e.printStackTrace();
        return null;
      }

      return mc;
  }

  public Cursor getSuggestions(String query, int limit)
  {
    //Log.d(TAG, "query: " + query);

    int totCount = 0;
    String[] menuCols = new String[]
    {
        BaseColumns._ID,
        SearchManager.SUGGEST_COLUMN_TEXT_1,
        SearchManager.SUGGEST_COLUMN_TEXT_2,
        SearchManager.SUGGEST_COLUMN_ICON_1,
        SearchManager.SUGGEST_COLUMN_RESULT_CARD_IMAGE,
        SearchManager.SUGGEST_COLUMN_INTENT_ACTION,
        SearchManager.SUGGEST_COLUMN_INTENT_DATA,
        SearchManager.SUGGEST_COLUMN_VIDEO_WIDTH,
        SearchManager.SUGGEST_COLUMN_VIDEO_HEIGHT,
        SearchManager.SUGGEST_COLUMN_PRODUCTION_YEAR,
        SearchManager.SUGGEST_COLUMN_DURATION,
        SearchManager.SUGGEST_COLUMN_SHORTCUT_ID
    };
    MatrixCursor mc = new MatrixCursor(menuCols);

    String str_req = "[" +
      String.format(SEARCH_MOVIES_JSON,
        "\"or\": [" +
        "{\"operator\": \"contains\", \"field\": \"title\", \"value\": \"" + query + "\"}," +
        "{\"operator\": \"contains\", \"field\": \"originaltitle\", \"value\": \"" + query + "\"}," +
        "{\"operator\": \"contains\", \"field\": \"set\", \"value\": \"" + query + "\"}]", REQ_ID_MOVIES) +
      "," +
      String.format(SEARCH_SHOWS_JSON,
        "\"or\": [" +
        "{\"operator\": \"contains\", \"field\": \"title\", \"value\": \"" + query + "\"}," +
        "{\"operator\": \"contains\", \"field\": \"originaltitle\", \"value\": \"" + query + "\"}]", REQ_ID_SHOWS) +
    "," +
      String.format(SEARCH_ALBUMS_JSON,
        "\"or\": [" +
        "{\"operator\": \"contains\", \"field\": \"album\", \"value\": \"" + query + "\"}," +
        "{\"operator\": \"contains\", \"field\": \"label\", \"value\": \"" + query + "\"}]", REQ_ID_ALBUMS) +
    "," +
      String.format(SEARCH_ARTISTS_JSON,
        "\"operator\": \"contains\", \"field\": \"artist\", \"value\": \"" + query + "\"", REQ_ID_ARTISTS) +
    "," +
      String.format(SEARCH_MOVIES_JSON,
        "\"or\": [" +
         "{\"operator\": \"contains\", \"field\": \"actor\", \"value\": \"" + query + "\"}," +
        "{\"operator\": \"contains\", \"field\": \"director\", \"value\": \"" + query + "\"}]", REQ_ID_MOVIES_ACTOR) +
    "," +
      String.format(SEARCH_SHOWS_JSON,
        "\"or\": [" +
        "{\"operator\": \"contains\", \"field\": \"actor\", \"value\": \"" + query + "\"}," +
        "{\"operator\": \"contains\", \"field\": \"director\", \"value\": \"" + query + "\"}]", REQ_ID_SHOWS_ACTOR) +
    "]";

    JSONArray res_array = request_array(str_req);
    if (res_array == null)
      return null;

    int nb_movies = 0;
    int nb_shows = 0;
    for (int j = 0; j < res_array.length(); ++j)
    {
      String id;
      JSONObject resp;
      try
      {
        resp = res_array.getJSONObject(j);
        if (resp == null)
          continue;

        id = resp.getString("id");
      }
      catch (Exception e)
      {
        e.printStackTrace();
        continue;
      }

      if (id.equals(REQ_ID_MOVIES) || ((nb_movies + nb_shows) < 3 && id.equals(REQ_ID_MOVIES_ACTOR)))
      {
        searchmovies: try
        {
          if (resp.isNull("result"))
            break searchmovies;
          JSONObject results = resp.getJSONObject("result");
          if (results == null || results.isNull("movies"))
            break searchmovies;
          JSONArray movies = results.getJSONArray("movies");

          for (int i = 0; i < movies.length() && totCount < limit; ++i)
          {
            JSONObject movie = movies.getJSONObject(i);

            int rYear = 0;
            long rDur = 0;
            try
            {
              rYear = movie.getInt("year");
              rDur = movie.getLong("runtime") * 1000;
            }
            catch (Exception e)
            {
              e.printStackTrace();
            }
            mc.addRow(new Object[]
                    {
                            movie.getString("movieid"),
                            movie.getString("title"),
                            movie.getString("tagline"),
                            XBMCImageContentProvider.GetImageUri(getDownloadUrl(movie.getString("thumbnail"))).toString(),
                            XBMCImageContentProvider.GetImageUri(getDownloadUrl(movie.getString("thumbnail"))).toString(),
                            Intent.ACTION_VIEW,
                            Uri.parse("videodb://movies/titles/" + movie.getString("movieid")),
                            0,
                            0,
                            rYear,
                            rDur,
                            -1
                    });
            nb_movies++;
            totCount++;
          }
        } catch (Exception e)
        {
          e.printStackTrace();
        }
      }
      else if (id.equals(REQ_ID_SHOWS) || ((nb_movies + nb_shows) < 3 && id.equals(REQ_ID_SHOWS_ACTOR)))
      {
        searchtv: try
        {
          if(resp.isNull("result"))
            break searchtv;
          JSONObject results = resp.getJSONObject("result");
          if (results == null || results.isNull("tvshows"))
            break searchtv;
          JSONArray tvshows = results.getJSONArray("tvshows");

          for (int i = 0; i < tvshows.length() && totCount < limit; ++i)
          {
            JSONObject tvshow = tvshows.getJSONObject(i);

            int rYear = 0;
            long rDur = 0;
            try
            {
              rYear = tvshow.getInt("year");
            }
            catch (Exception e)
            {
              e.printStackTrace();
            }
            mc.addRow(new Object[]
                    {
                            tvshow.getString("tvshowid"),
                            tvshow.getString("title"),
                            tvshow.getString("plot"),
                            XBMCImageContentProvider.GetImageUri(getDownloadUrl(tvshow.getString("thumbnail"))).toString(),
                            XBMCImageContentProvider.GetImageUri(getDownloadUrl(tvshow.getString("thumbnail"))).toString(),
                            Intent.ACTION_GET_CONTENT,
                            Uri.parse("videodb://tvshows/titles/" + tvshow.getString("tvshowid") + "/"),
                            0,
                            0,
                            rYear,
                            45 * 60 * 1000,  // HACK: we don't get show duration via JSON: hardcode one to have search working
                            -1
                    });
            nb_shows++;
            totCount++;
          }
        } catch (Exception e)
        {
          e.printStackTrace();
        }
      }
      else if (id.equals(REQ_ID_ALBUMS))
      {
        searchalbums: try
        {
          if (resp.isNull("result"))
            break searchalbums;
          JSONObject results = resp.getJSONObject("result");
          if (results == null || results.isNull("albums"))
            break searchalbums;
          JSONArray albums = results.getJSONArray("albums");

          for (int i = 0; i < albums.length() && totCount < limit; ++i)
          {
            JSONObject album = albums.getJSONObject(i);
            mc.addRow(new Object[]
            {
              album.getString("albumid"),
              album.getString("title"),
              album.getString("displayartist"),
              XBMCImageContentProvider.GetImageUri(getDownloadUrl(album.getString("thumbnail"))).toString(),
              XBMCImageContentProvider.GetImageUri(getDownloadUrl(album.getString("thumbnail"))).toString(),
              Intent.ACTION_GET_CONTENT,
              Uri.parse("musicdb://albums/" + album.getString("albumid") + "/"),
              0,
              0,
              0,
              0,
              -1
            });
            totCount++;
          }
        } catch (Exception e)
        {
          e.printStackTrace();
        }
      }
      else if (id.equals(REQ_ID_ARTISTS))
      {
        searchartists: try
        {
          if (resp.isNull("result"))
            break searchartists;
          JSONObject results = resp.getJSONObject("result");
          if (results == null || results.isNull("artists"))
            break searchartists;
          JSONArray artists = results.getJSONArray("artists");

          for (int i = 0; i < artists.length() && totCount < limit; ++i)
          {
            JSONObject artist = artists.getJSONObject(i);
            mc.addRow(new Object[]
            {
              artist.getString("artistid"),
              artist.getString("artist"),
              artist.getString("description"),
              XBMCImageContentProvider.GetImageUri(getDownloadUrl(artist.getString("thumbnail"))).toString(),
              XBMCImageContentProvider.GetImageUri(getDownloadUrl(artist.getString("thumbnail"))).toString(),
              Intent.ACTION_GET_CONTENT,
              Uri.parse("musicdb://artists/" + artist.getString("artistid") + "/"),
              0,
              0,
              0,
              0,
              -1
            });
            totCount++;
          }
        } catch (Exception e)
        {
          e.printStackTrace();
        }
      }
    }

    return mc;
  }

  public void updateLeanback(Context ctx)
  {
    if (mNotificationManager == null)
    {
      mNotificationManager = (NotificationManager) ctx.getSystemService(Context.NOTIFICATION_SERVICE);
    }
    for(Integer id : mRecomendationIds)
      mNotificationManager.cancel(id);
    mRecomendationIds.clear();

    XBMCRecommendationBuilder builder = new XBMCRecommendationBuilder()
        .setContext(ctx)
        .setSmallIcon(R.drawable.notif_icon);

    JSONObject rep = request_object(RECOMMENDATION_MOVIES_JSON);
    if (rep != null && !rep.isNull("result"))
    {
      try
      {
        JSONObject results = rep.getJSONObject("result");
        JSONArray movies = results.getJSONArray("movies");

        int count = 0;
        for (int i = 0; i < movies.length() && count < MAX_RECOMMENDATIONS; ++i)
        {
          try
          {
            JSONObject movie = movies.getJSONObject(i);
            int id = Integer.parseInt(movie.getString("movieid")) + 1000000;

            final XBMCRecommendationBuilder notificationBuilder = builder
                .setBackground(
                    XBMCImageContentProvider.GetImageUri(
                        getDownloadUrl(movie.getString("fanart"))).toString())
                .setId(id).setPriority(MAX_RECOMMENDATIONS - count)
                .setTitle(movie.getString("title"))
                .setDescription(movie.getString("tagline"))
                .setIntent(buildPendingMovieIntent(ctx, movie));

            Bitmap bitmap = getBitmap(movie.getString("thumbnail"));
            notificationBuilder.setBitmap(bitmap);
            Notification notification = notificationBuilder.build();
            mNotificationManager.notify(id, notification);
            mRecomendationIds.add(id);
            ++count;
          } catch (Exception e)
          {
            continue;
          }
        }
      } catch (Exception e)
      {
        e.printStackTrace();
      }
    }

    rep = request_object(RECOMMENDATIONS_SHOWS_JSON);
    if (rep != null && !rep.isNull("result"))
    {
      try
      {
        JSONObject results = rep.getJSONObject("result");
        JSONArray tvshows = results.getJSONArray("tvshows");

        int count = 0;
        for (int i = 0; i < tvshows.length() && count < MAX_RECOMMENDATIONS; ++i)
        {
          try
          {
            JSONObject tvshow = tvshows.getJSONObject(i);
            int id = Integer.parseInt(tvshow.getString("tvshowid")) + 2000000;

            final XBMCRecommendationBuilder notificationBuilder = builder
                .setBackground(
                    XBMCImageContentProvider.GetImageUri(
                        getDownloadUrl(tvshow.getString("fanart"))).toString())
                .setId(id).setPriority(MAX_RECOMMENDATIONS - count)
                .setTitle(tvshow.getString("title"))
                .setDescription(tvshow.getString("plot"))
                .setIntent(buildPendingShowIntent(ctx, tvshow));

            Bitmap bitmap = getBitmap(tvshow.getString("thumbnail"));
            notificationBuilder.setBitmap(bitmap);
            Notification notification = notificationBuilder.build();
            mNotificationManager.notify(id, notification);
            mRecomendationIds.add(id);
            ++count;
          } catch (Exception e)
          {
            continue;
          }

        }
      } catch (Exception e)
      {
        e.printStackTrace();
      }
    }

    rep = request_object(RECOMMENDATIONS_ALBUMS_JSON);
    if (rep != null && !rep.isNull("result"))
    {
      try
      {
        JSONObject results = rep.getJSONObject("result");
        JSONArray albums = results.getJSONArray("albums");

        int count = 0;
        for (int i = 0; i < albums.length() && count < MAX_RECOMMENDATIONS; ++i)
        {
          try
          {
            JSONObject album = albums.getJSONObject(i);
            int id = Integer.parseInt(album.getString("albumid")) + 3000000;

            final XBMCRecommendationBuilder notificationBuilder = builder
                .setBackground(
                    XBMCImageContentProvider.GetImageUri(
                        getDownloadUrl(album.getString("fanart"))).toString())
                .setId(id).setPriority(MAX_RECOMMENDATIONS - count)
                .setTitle(album.getString("title"))
                .setDescription(album.getString("displayartist"))
                .setIntent(buildPendingAlbumIntent(ctx, album));

            Bitmap bitmap = getBitmap(album.getString("thumbnail"));
            notificationBuilder.setBitmap(bitmap);
            Notification notification = notificationBuilder.build();
            mNotificationManager.notify(id, notification);
            mRecomendationIds.add(id);
            ++count;
          } catch (Exception e)
          {
            continue;
          }

        }
      } catch (Exception e)
      {
        e.printStackTrace();
      }
    }

  }

  private PendingIntent buildPendingMovieIntent(Context ctx, JSONObject movie)
  {
    try
    {
      Intent detailsIntent = new Intent(ctx, Splash.class);
      detailsIntent.setAction(Intent.ACTION_VIEW);
      detailsIntent.setData(Uri.parse("videodb://movies/titles/" + movie.getString("movieid") + "?showinfo=true"));
      //detailsIntent.putExtra(MovieDetailsActivity.MOVIE, movie);
      //detailsIntent.putExtra(MovieDetailsActivity.NOTIFICATION_ID, id);

      return PendingIntent.getActivity(ctx, 0, detailsIntent, PendingIntent.FLAG_CANCEL_CURRENT);
    } catch (Exception e)
    {
      e.printStackTrace();
      return null;
    }
  }

  private PendingIntent buildPendingShowIntent(Context ctx, JSONObject tvshow)
  {
    try
    {
      Intent detailsIntent = new Intent(ctx, Splash.class);
      detailsIntent.setAction(Intent.ACTION_GET_CONTENT);
      detailsIntent.setData(Uri.parse("videodb://tvshows/titles/" + tvshow.getString("tvshowid") + "/"));

      return PendingIntent.getActivity(ctx, 0, detailsIntent, PendingIntent.FLAG_CANCEL_CURRENT);
    } catch (Exception e)
    {
      e.printStackTrace();
      return null;
    }
  }

  private PendingIntent buildPendingAlbumIntent(Context ctx, JSONObject tvshow)
  {
    try
    {
      Intent detailsIntent = new Intent(ctx, Splash.class);
      detailsIntent.setAction(Intent.ACTION_GET_CONTENT);
      detailsIntent.setData(Uri.parse("musicdb://albums/" + tvshow.getString("albumid") + "/"));

      return PendingIntent.getActivity(ctx, 0, detailsIntent, PendingIntent.FLAG_CANCEL_CURRENT);
    } catch (Exception e)
    {
      e.printStackTrace();
      return null;
    }
  }

  public List<File> getFiles(String url)
  {
    List<File> files = new ArrayList<File>();

    try
    {
      JSONObject req = request_object(String.format(RETRIEVE_FILE_ITEMS, url, "1"));

      if (req == null || req.isNull("result"))
        return files;

      JSONObject results = req.getJSONObject("result");
      JSONArray filesA = results.getJSONArray("files");

      for (int i = 0; i < filesA.length(); ++i)
      {
        JSONObject fileO = filesA.getJSONObject(i);
        Uri uri = Uri.parse(fileO.getString("file"));
        File file = File.createFile(fileO.getString("label"), fileO.getString("filetype"), XBMCFileContentProvider.buildUri(uri.getPath()).toString());
        if (fileO.has("id"))
          file.setId(fileO.getInt("id"));
        if (fileO.has("type") && !fileO.getString("type").equals("unknown"))
          file.setMediatype(fileO.getString("type"));
        files.add(file);
      }
    } catch (Exception e)
    {
      e.printStackTrace();
    }

    return files;
  }

  private Movie createMovieFromJson(JSONObject details)
  {
    Movie med = new Movie();

    try
    {
      med.setId(details.getInt("movieid"));
      med.setTitle(details.getString("title"));
      med.setDescription(details.getString("tagline"));
      if (details.has("thumbnail") && !details.getString("thumbnail").isEmpty())
      {
        String url = getDownloadUrl(details.getString("thumbnail"));
        if (!url.isEmpty())
          med.setCardImageUrl(XBMCImageContentProvider.GetImageUri(url).toString());
      }
      med.setCardImageAspectRatio("2:3");
      if (details.has("fanart") && !details.getString("fanart").isEmpty())
      {
        String url = getDownloadUrl(details.getString("fanart"));
        if (!url.isEmpty())
          med.setBackgroundImageUrl(XBMCImageContentProvider.GetImageUri(url).toString());
      }
      med.setXbmcUrl("videodb://movies/titles/" + details.getString("movieid") + "?showinfo=true");

      /*
      if (details.has("trailer") && !details.getString("trailer").isEmpty())
      {
        String trailer_url = details.getString("trailer");
        if (trailer_url.startsWith("plugin://plugin.video.youtube"))
        {
          Uri u = Uri.parse(trailer_url);
          String videoid = u.getQueryParameter("videoid");
          String yturl = Uri.parse(m_xbmc_web_url)
                  .buildUpon()
                  .appendPath("addons").appendPath("webinterface.youtube-dl")
                  .appendQueryParameter("url", "http://www.youtube.com/watch?v=" + videoid)
                  .build()
                  .toString();
          med.setVideoUrl(XBMCYTDLContentProvider.GetYTDLUri(yturl).toString());
          Log.d(TAG, "createMovieFromJson: " + med.getVideoUrl());
        }
        else
          med.setVideoUrl(trailer_url);
      }
      */
      med.setCategory(Media.MEDIA_TYPE_MOVIE);

      med.setYear(details.getString("year"));
      med.setPlot(details.getString("plot"));
    }
    catch (Exception e)
    {
      return null;
    }

    return med;
  }

  private TVShow createTVShowFromJson(JSONObject details)
  {
    TVShow med = new TVShow();

    try
    {
      med.setId(details.getInt("tvshowid"));
      med.setTitle(details.getString("title"));
      JSONArray ja = details.getJSONArray("studio");
      if (ja.length() > 0)
        med.setDescription(ja.getString(0));
      if (details.has("thumbnail") && !details.getString("thumbnail").isEmpty())
      {
        String url = getDownloadUrl(details.getString("thumbnail"));
        if (!url.isEmpty())
          med.setCardImageUrl(XBMCImageContentProvider.GetImageUri(url).toString());
      }
      med.setCardImageAspectRatio("2:3");
      if (details.has("fanart") && !details.getString("fanart").isEmpty())
      {
        String url = getDownloadUrl(details.getString("fanart"));
        if (!url.isEmpty())
          med.setBackgroundImageUrl(XBMCImageContentProvider.GetImageUri(url).toString());
      }
      med.setXbmcUrl("videodb://tvshows/titles/" + details.getInt("tvshowid") + "/");
      med.setCategory(Media.MEDIA_TYPE_TVSHOW);
    }
    catch (Exception e)
    {
      return null;
    }

    return med;
  }

  private TVEpisode createTVEpisodeFromJson(JSONObject details)
  {
    TVEpisode med = new TVEpisode();

    try
    {
      med.setId(details.getInt("episodeid"));
      med.setTitle(details.getString("title"));
      med.setDescription(details.getString("showtitle"));
      if (details.has("thumbnail") && !details.getString("thumbnail").isEmpty())
      {
        String url = getDownloadUrl(details.getString("thumbnail"));
        if (!url.isEmpty())
          med.setCardImageUrl(XBMCImageContentProvider.GetImageUri(url).toString());
      }
      med.setCardImageAspectRatio("16:9");
      if (details.has("fanart") && !details.getString("fanart").isEmpty())
      {
        String url = getDownloadUrl(details.getString("fanart"));
        if (!url.isEmpty())
          med.setBackgroundImageUrl(XBMCImageContentProvider.GetImageUri(url).toString());
      }
      med.setXbmcUrl("videodb://tvshows/titles/" + details.getInt("tvshowid") + "/" + details.getInt("episodeid") + "?showinfo=true");
/*
      String url = getDownloadUrl(details.getString("file"));
      if (!url.isEmpty())
        med.setVideoUrl(url);
*/
      med.setCategory(Media.MEDIA_TYPE_TVEPISODE);

      med.setSeason(details.getInt("season"));
      med.setEpisode(details.getInt("episode"));
    }
    catch (Exception e)
    {
      return null;
    }

    return med;
  }

  private Album createAlbumFromJson(JSONObject details)
  {
    Album med = new Album();

    try
    {
      med.setId(details.getInt("albumid"));
      med.setTitle(details.getString("title"));
      med.setDescription(details.getString("displayartist"));
      if (details.has("thumbnail") && !details.getString("thumbnail").isEmpty())
      {
        String url = getDownloadUrl(details.getString("thumbnail"));
        if (!url.isEmpty())
          med.setCardImageUrl(XBMCImageContentProvider.GetImageUri(url).toString());
      }
      med.setCardImageAspectRatio("1:1");
      if (details.has("fanart") && !details.getString("fanart").isEmpty())
      {
        String url = getDownloadUrl(details.getString("fanart"));
        if (!url.isEmpty())
          med.setBackgroundImageUrl(XBMCImageContentProvider.GetImageUri(url).toString());
      }
      med.setXbmcUrl("musicdb://albums/" + details.getString("albumid") + "/");
      med.setCategory(Media.MEDIA_TYPE_ALBUM);
    }
    catch (Exception e)
    {
      return null;
    }

    return med;
  }

  private Song createSongFromJson(JSONObject details)
  {
    Song med = new Song();

    try
    {
      med.setId(details.getInt("songid"));
      med.setTitle(details.getString("title"));
      med.setDescription(details.getString("displayartist"));
      if (details.has("thumbnail") && !details.getString("thumbnail").isEmpty())
      {
        String url = getDownloadUrl(details.getString("thumbnail"));
        if (!url.isEmpty())
          med.setCardImageUrl(XBMCImageContentProvider.GetImageUri(url).toString());
      }
      med.setCardImageAspectRatio("1:1");
      if (details.has("fanart") && !details.getString("fanart").isEmpty())
      {
        String url = getDownloadUrl(details.getString("fanart"));
        if (!url.isEmpty())
          med.setBackgroundImageUrl(XBMCImageContentProvider.GetImageUri(url).toString());
      }

      String extension = "";
      if (details.has("file") && !details.getString("file").isEmpty())
      {
        String file = details.getString("file");
        extension = file.substring(file.lastIndexOf("."));
      }

      if (details.has("albumid") && !details.getString("albumid").isEmpty())
        med.setXbmcUrl("musicdb://albums/" + details.getString("albumid") + "/" + details.getInt("songid") + extension);
      else
        med.setXbmcUrl("musicdb://songs/" + details.getInt("songid") + extension);

/*
      String url = getDownloadUrl(details.getString("file"));
      if (!url.isEmpty())
        med.setVideoUrl(url);
*/

      med.setCategory(Media.MEDIA_TYPE_SONG);
    }
    catch (Exception e)
    {
      return null;
    }

    return med;
  }

  private MusicVideo createMusicvideoFromJson(JSONObject details)
  {
    MusicVideo med = new MusicVideo();

    try
    {
      med.setId(details.getInt("musicvideoid"));
      med.setTitle(details.getString("title"));
      JSONArray ja = details.getJSONArray("artist");
      if (ja.length() > 0)
        med.setDescription(ja.getString(0));
      if (details.has("thumbnail") && !details.getString("thumbnail").isEmpty())
      {
        String url = getDownloadUrl(details.getString("thumbnail"));
        if (!url.isEmpty())
          med.setCardImageUrl(XBMCImageContentProvider.GetImageUri(url).toString());
      }
      med.setCardImageAspectRatio("1:1");
      if (details.has("fanart") && !details.getString("fanart").isEmpty())
      {
        String url = getDownloadUrl(details.getString("fanart"));
        if (!url.isEmpty())
          med.setBackgroundImageUrl(XBMCImageContentProvider.GetImageUri(url).toString());
      }

      med.setXbmcUrl("videodb://musicvideos/titles/" + details.getInt("musicvideoid"));

      String url = getDownloadUrl(details.getString("file"));
      if (!url.isEmpty())
        med.setVideoUrl(url);

      med.setCategory(Media.MEDIA_TYPE_MUSICVIDEO);
    }
    catch (Exception e)
    {
      return null;
    }

    return med;
  }

  public List<Media> getSuggestions()
  {
    List<Media> medias = new ArrayList<Media>();

    JSONObject rep = request_object(RECOMMENDATION_MOVIES_JSON);
    if (rep != null && !rep.isNull("result"))
    {
      try
      {
        JSONObject results = rep.getJSONObject("result");
        JSONArray movies = results.getJSONArray("movies");

        int count = 0;
        for (int i = 0; i < movies.length() && count < MAX_RECOMMENDATIONS; ++i)
        {
          try
          {
            JSONObject details = movies.getJSONObject(i);
            Movie med = createMovieFromJson(details);
            if (med != null)
            {
              medias.add(med);
              ++count;
            }
          } catch (Exception e)
          {
            continue;
          }
        }
      } catch (Exception e)
      {
        e.printStackTrace();
      }
    }

    rep = request_object(RECOMMENDATIONS_SHOWS_JSON);
    if (rep != null && !rep.isNull("result"))
    {
      try
      {
        JSONObject results = rep.getJSONObject("result");
        JSONArray tvshows = results.getJSONArray("tvshows");

        int count = 0;
        for (int i = 0; i < tvshows.length() && count < MAX_RECOMMENDATIONS; ++i)
        {
          try
          {
            JSONObject tvshow = tvshows.getJSONObject(i);
            TVShow med = createTVShowFromJson(tvshow);
            if (med != null)
            {
              medias.add(med);
              ++count;
            }
          } catch (Exception e)
          {
            continue;
          }

        }
      } catch (Exception e)
      {
        e.printStackTrace();
      }
    }

    rep = request_object(RECOMMENDATIONS_ALBUMS_JSON);
    if (rep != null && !rep.isNull("result"))
    {
      try
      {
        JSONObject results = rep.getJSONObject("result");
        JSONArray albums = results.getJSONArray("albums");

        int count = 0;
        for (int i = 0; i < albums.length() && count < MAX_RECOMMENDATIONS; ++i)
        {
          try
          {
            JSONObject album = albums.getJSONObject(i);
            Album med = createAlbumFromJson(album);
            if (med != null)
            {
              medias.add(med);
              ++count;
            }
          } catch (Exception e)
          {
            continue;
          }

        }
      } catch (Exception e)
      {
        e.printStackTrace();
      }
    }

    return medias;
  }

  public List<Media> getMedias(List<File> files)
  {
    List<Media> medias = new ArrayList<Media>();

    try
    {
      int nbItems = 0;
      for (int i = 0; i < files.size() && nbItems < MAX_ITEMS; ++i)
      {
        File file = files.get(i);
        String mediaType = file.getMediatype();
        long mediaId = file.getId();
        if (mediaType.equals("movie"))
        {
          JSONObject reqMovie = request_object(String.format(RETRIEVE_MOVIE_DETAILS, mediaId, "1"));
          if (reqMovie == null || reqMovie.isNull("result"))
            continue;

          JSONObject details = reqMovie.getJSONObject("result").getJSONObject("moviedetails");
          Movie med = createMovieFromJson(details);
          if (med != null)
          {
            medias.add(med);
            nbItems++;
          }
        }
        else if (mediaType.equals("episode"))
        {
          JSONObject reqMovie = request_object(String.format(RETRIEVE_EPISODE_DETAILS, mediaId, "1"));
          if (reqMovie == null || reqMovie.isNull("result"))
            continue;

          JSONObject details = reqMovie.getJSONObject("result").getJSONObject("episodedetails");
          TVEpisode med = createTVEpisodeFromJson(details);
          if (med != null)
          {
            medias.add(med);
            nbItems++;
          }
        }
        else if (mediaType.equals("tvshow"))
        {
          JSONObject reqMovie = request_object(String.format(RETRIEVE_TVSHOW_DETAILS, mediaId, "1"));
          if (reqMovie == null || reqMovie.isNull("result"))
            continue;

          JSONObject details = reqMovie.getJSONObject("result").getJSONObject("tvshowdetails");
          TVShow med = createTVShowFromJson(details);
          medias.add(med);
          nbItems++;
        }
        else if (mediaType.equals("album"))
        {
          JSONObject reqMovie = request_object(String.format(RETRIEVE_ALBUM_DETAILS, mediaId, "1"));
          if (reqMovie == null || reqMovie.isNull("result"))
            continue;

          JSONObject details = reqMovie.getJSONObject("result").getJSONObject("albumdetails");
          Album med = createAlbumFromJson(details);
          medias.add(med);
          nbItems++;
        }
        else if (mediaType.equals("song"))
        {
          JSONObject reqMovie = request_object(String.format(RETRIEVE_SONG_DETAILS, mediaId, "1"));
          if (reqMovie == null || reqMovie.isNull("result"))
            continue;

          JSONObject details = reqMovie.getJSONObject("result").getJSONObject("songdetails");
          Song med = createSongFromJson(details);
          medias.add(med);
          nbItems++;
        }
        else if (mediaType.equals("musicvideo"))
        {
          JSONObject reqMovie = request_object(String.format(RETRIEVE_MUSICVIDEO_DETAILS, mediaId, "1"));
          if (reqMovie == null || reqMovie.isNull("result"))
            continue;

          JSONObject details = reqMovie.getJSONObject("result").getJSONObject("musicvideodetails");
          MusicVideo med = createMusicvideoFromJson(details);
          medias.add(med);
          nbItems++;
        }
      }
    } catch (Exception e)
    {
      e.printStackTrace();
    }

    return medias;
  }
}
